package com.example.demo.controller;

import static org.springframework.http.ResponseEntity.ok;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.jwt.JwtTokenProvider;
import com.example.demo.model.Customer;
import com.example.demo.model.Login;
import com.example.demo.registration.dal.CustomerDAL;
import com.example.demo.repository.CustomerRepository;
import com.example.demo.service.CustomUserDetailsService;
import com.example.demo.service.RegistrationService;
import com.google.gson.Gson;
@RequestMapping("/api")
@RestController
public class RegistrationController {
	
	@Autowired
	private RegistrationService service;
	
	@Autowired
    private PasswordEncoder passwordEncoder;
	
	@Autowired
	private AuthenticationManager authenticationManager;

	@Autowired
	private JwtTokenProvider jwtTokenProvider;

	@Autowired
	private CustomerRepository customerRepository;

	@Autowired
	private CustomerDAL customerDal;
	
	@Autowired
	private CustomUserDetailsService userService;


	@PostMapping("/register")
	public ResponseEntity<?> registerCustomer(@RequestBody String jsonString) throws Exception {
		//mapping string to pojo classs
		Gson g = new Gson();
		Customer customer = g.fromJson(jsonString, Customer.class);
		 HashMap hashmap=new HashMap();
				customer.setPassword(passwordEncoder.encode(customer.getPassword()));
		String tempEmailId=customer.getEmail();//checking the email id is not null and whether it is existing in the database
		System.out.println(tempEmailId);
		
		if(tempEmailId !=null && !tempEmailId.equals("")){
			Customer customerobj=service.getById(tempEmailId);
			if (customerobj!=null) {
				//throw new Exception ("user with "+tempEmailId+" is already exists" );//if email id exists throw the exception
			  
			   hashmap.put("message","user already exists");
			   return new ResponseEntity(hashmap,HttpStatus.INTERNAL_SERVER_ERROR);
			}
			System.out.println(customerobj);
		}
		
		Customer customerobj=service.saveCustomer(customer);//if email id not exist save it to database
		
		hashmap.put("Customer", customerobj);
		 return new ResponseEntity(hashmap,HttpStatus.OK);
	}
	
	
	
	
	@GetMapping("/get/user")
	public Customer getById(@RequestParam String id)
	{
		return service.getById(id);
	}
	
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody Login login)
	{
		Customer customer=service.getById(login.getEmail());
		
		 HashMap<String,Object> hashmap=new HashMap();
		 if(passwordEncoder.matches(login.getPassword(),customer.getPassword()))
		 {
			 String username = login.getEmail();
			// customer.setRoles(service.getById(userId));
			 authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, login.getPassword()));
			// String token = jwtTokenProvider.createToken(username, this.customerRepository.findByEmail(username).getRoles());
			 String token = jwtTokenProvider.createToken(username, customer.getRoles());
				Map<String, Object> model = new HashMap<>();
				model.put("status", 200);
				model.put("customer", customer);
				model.put("token", token);
//			model.put("data", data);
				
			 hashmap.put("message", "login success");
			 //return new ResponseEntity(hashmap,HttpStatus.OK);
			 return ok(model);
		 }
		 else {
			 hashmap.put("message", "login failed");
			 return new ResponseEntity(hashmap,HttpStatus.INTERNAL_SERVER_ERROR);
		 }
		//return null;
	}
	
	
}
